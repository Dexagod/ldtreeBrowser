import { EventEmitter } from "events";
import { Parser } from './Parser';
const fs = require("fs")

const PromiseQueue = require("easy-promise-queue").default;
const normalizeString = function(e:string) {return e.toLowerCase()}

export class AutocompleteClient extends EventEmitter{
  
  private parser: any;
  private requestCount = 0;

  private previousQuery : any = null;

  private queryqueue: any;
  private MAXAMOUNT: number;

  constructor(maxamount: number, shaclpath: string){
    super();
    this.parser = new Parser();
    this.parser.on("request", (e: any) => this.requestCount += 1)
    this.queryqueue = new PromiseQueue({concurrency: 1});
    this.MAXAMOUNT = maxamount

  }

  async query(searchvalue: string, queryClass : any, shaclpath: string, queryURL: any){
    console.log("SEARCH:", searchvalue)

    let previousQueryProperties = await this.previousQuery;

    let previousQueryItems = new Array();
    let previousQuerySession : any = null;
    let previousQuerySearchvalue : any = null;

    if (previousQueryProperties === null || previousQueryProperties === undefined){
      console.log("PREVIOUS NULL", previousQueryProperties)
    } else {
      console.log("PREVIOUS", previousQueryProperties.session.nodes.length, previousQueryProperties.items.length, previousQueryProperties.searchvalue)
      previousQueryItems = previousQueryProperties["items"]
      previousQuerySession = previousQueryProperties["session"]
      previousQuerySearchvalue = previousQueryProperties["searchvalue"]
    }

    let MAXAMOUNT = this.MAXAMOUNT
    let parser = this.parser;
    let emittedItems = 0;

    if ( ! (previousQuerySearchvalue === null || ! searchvalue.startsWith(previousQuerySearchvalue) || searchvalue.length < previousQuerySearchvalue.length ) ){
      for (let quad of previousQueryItems){
        if (normalizeString(quad.object.value).startsWith(normalizeString(searchvalue))){
          if (emittedItems < MAXAMOUNT){
            this.emit("data", {data: quad, searchvalue: searchvalue, count: emittedItems})
            emittedItems += 1;
          }
        }
      }
    }
    let query = new queryClass(parser, queryURL);
    query.on("data", (data: any) => {
      for(let quad of data.quads){
        if (emittedItems < MAXAMOUNT){
          if (quad.predicate.value === shaclpath && normalizeString(quad.object.value).startsWith(normalizeString(searchvalue))){
            this.emit("data", {data: quad, searchvalue: searchvalue, count: emittedItems})
            emittedItems += 1;
          }
        }
      }
    });


    this.queryqueue.add(() => {
      let newQuery = new Promise(async function (resolve, reject) {
        let currentItems = new Array();
        let currentSession: any = null;
        
        if ( ! (previousQuerySearchvalue === null || ! searchvalue.startsWith(previousQuerySearchvalue) || searchvalue.length < previousQuerySearchvalue.length ) ){
          for (let quad of previousQueryItems){
            if (normalizeString(quad.object.value).startsWith(normalizeString(searchvalue))){
              currentItems.push(quad);
            }
          }
          currentSession = await previousQuerySession;
        }
    
    
        let currentItemsMap = currentItems.map(e => e.subject.value)
    
        if (currentItems.length < MAXAMOUNT){
          query.on("data", (data: any) => {
            for(let quad of data.quads){
              if (quad.predicate.value === shaclpath && normalizeString(quad.object.value).startsWith(normalizeString(searchvalue))){
                if (currentItemsMap.indexOf(quad.subject.value === -1)){
                  currentItems.push(quad)
                  if (currentItems.length >= MAXAMOUNT){
                    query.interrupt();
                  }
                }
              }
            }
          })
          console.log("QUERY NEW QUERY", searchvalue)
          query.query(queryURL, searchvalue, currentSession).then( (resultsession: any) => {
            let resultObject = {
              "session": resultsession,
              "items": currentItems,
              "searchvalue": searchvalue,
            }
            resolve(resultObject)
          }).catch( (error: any) => {
            let resultObject = {
              "session": null,
              "items": currentItems,
              "searchvalue": searchvalue,
            }
            resolve(resultObject)
          })
        } else {
          let resultObject = {
            "session": currentSession,
            "items": currentItems,
            "searchvalue": searchvalue,
          } 
          resolve(resultObject)
        }
      })
      this.previousQuery = newQuery;
      return newQuery; 
    });
    
  }

}